"""Module for handling the /start command and initial user registration flow."""

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    CallbackContext,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler
)
from telegram.constants import ParseMode

from database.db_handler import DB as db

# Define states
HORIZON, GOAL = range(2)

def is_user_registered(user_id: int) -> bool:
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. """
    return db.check_user_exists(user_id)

def register_user(user_id: int, user_name: str) -> None:
    """ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. """
    db.add_user(user_id, user_name)

async def start(update: Update, _: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    user_id: int = update.message.chat_id
    user_name: str = update.message.from_user.first_name

    if not is_user_registered(user_id):
        register_user(user_id, user_name)

    keyboard = [
        [InlineKeyboardButton("–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π (1-3 –≥–æ–¥–∞)", callback_data='horizon_1')],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π (3-7 –ª–µ—Ç)", callback_data='horizon_2')],
        [InlineKeyboardButton("–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π (7+ –ª–µ—Ç)", callback_data='horizon_3')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Robo-Advisor <b>–§–∏–Ω—á–∏–∫</b>.\n\n"
             "üíº –ü–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!\n\n"
             "‚è≥ –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )
    return HORIZON

async def handle_horizon_selection(update: Update, _: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    query = update.callback_query
    await query.answer()

    user_id: int = query.message.chat_id
    horizon: str = query.data.split('_')[1]  # Extract number from 'horizon_X'

    save_user_horizon(user_id, horizon)

    goals_keyboard = []
    if horizon == '1':
        goals_keyboard = [
            [InlineKeyboardButton("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥—É—à–∫–∞", callback_data='goal_1')],
            [InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ", callback_data='goal_2')],
            [InlineKeyboardButton("–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å –ø–æ –∏–ø–æ—Ç–µ–∫–µ", callback_data='goal_3')]
        ]
    elif horizon == '2':
        goals_keyboard = [
            [InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", callback_data='goal_1')],
            [InlineKeyboardButton("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–π", callback_data='goal_2')],
            [InlineKeyboardButton("–ó–∞–º–µ–Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è", callback_data='goal_3')]
        ]
    else:
        goals_keyboard = [
            [InlineKeyboardButton("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å", callback_data='goal_1')],
            [InlineKeyboardButton("–ü–µ–Ω—Å–∏–æ–Ω–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è", callback_data='goal_2')],
            [InlineKeyboardButton("–ü–æ–∫—É–ø–∫–∞ –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –¥–æ–º–∞", callback_data='goal_3')]
        ]

    reply_markup = InlineKeyboardMarkup(goals_keyboard)
    await query.edit_message_text(
        text="‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å:",
        reply_markup=reply_markup
    )
    return GOAL

async def handle_goal_selection(update: Update, _: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–π —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    query = update.callback_query
    await query.answer()

    user_id: int = query.message.chat_id
    goal: str = query.data.split('_')[1]  # Extract number from 'goal_X'

    save_user_goal(user_id, goal)

    await query.edit_message_text(
        text="üéØ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /risk_profile"
    )
    return ConversationHandler.END

def save_user_horizon(user_id: int, horizon: str) -> None:
    """ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. """
    db.save_horizon(user_id, horizon)

def save_user_goal(user_id: int, goal: str) -> None:
    """ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–ª—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. """
    db.save_goal(user_id, goal)

# Create conversation handler
start_conversation = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        HORIZON: [CallbackQueryHandler(handle_horizon_selection, pattern='^horizon_')],
        GOAL: [CallbackQueryHandler(handle_goal_selection, pattern='^goal_')]
    },
    fallbacks=[]
)

__all__ = ['start_conversation']
