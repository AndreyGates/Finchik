"""Module for handling risk profile assessment and user risk tolerance evaluation."""

from typing import Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackContext,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler
)
from database.db_handler import DB as db

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
ANSWERING_QUESTIONS = 1

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_responses: Dict[int, Dict[str, int]] = {}

# –í–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
risk_questions = [
    {
        "question": "‚ùì –ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ —É–±—ã—Ç–∫–∞–º?",
        "options": [
            "–ù–µ –≥–æ—Ç–æ–≤ —Ç–µ—Ä—è—Ç—å –≤–æ–æ–±—â–µ",
            "–ì–æ—Ç–æ–≤ –∫ –Ω–µ–±–æ–ª—å—à–∏–º –ø—Ä–æ—Å–∞–¥–∫–∞–º",
            "–ì–æ—Ç–æ–≤ –∫ –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–∞–º —Ä–∞–¥–∏ —Ä–æ—Å—Ç–∞"
        ]
    },
    {
        "question": "‚è≥ –ö–∞–∫–æ–π —É —Ç–µ–±—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç?",
        "options": [
            "1-3 –≥–æ–¥–∞",
            "3-7 –ª–µ—Ç",
            "7+ –ª–µ—Ç"
        ]
    },
    {
        "question": "‚öñÔ∏è –ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ: —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –≤—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å?",
        "options": [
            "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
            "–ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é –∏ —Ä–∏—Å–∫–æ–º",
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç"
        ]
    },
    {
        "question": "üìä –ö–∞–∫—É—é –ø—Ä–æ—Å–∞–¥–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è —Ç—ã –≥–æ—Ç–æ–≤ —Ç–µ—Ä–ø–µ—Ç—å?",
        "options": [
            "–î–æ -5%",
            "–î–æ -15%",
            "–î–æ -30% –∏ –≤—ã—à–µ"
        ]
    }
]

def get_keyboard(question_index: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤."""
    options = risk_questions[question_index]["options"]
    keyboard = [
        [InlineKeyboardButton(f"1Ô∏è‚É£ {options[0]}", callback_data='1')],
        [InlineKeyboardButton(f"2Ô∏è‚É£ {options[1]}", callback_data='2')],
        [InlineKeyboardButton(f"3Ô∏è‚É£ {options[2]}", callback_data='3')]
    ]
    return InlineKeyboardMarkup(keyboard)

async def handle_risk_profile(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è."""
    user_id = update.message.chat_id
    user_responses[user_id] = {"score": 0, "question_index": 0}

    await update.message.reply_text(
        "üìù –î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ–π —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å. –Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 4 –≤–æ–ø—Ä–æ—Å–∞. –í—ã–±–∏—Ä–∞–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞."
    )
    await ask_next_question(user_id, context)
    return ANSWERING_QUESTIONS

async def ask_next_question(user_id: int, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞."""
    user_data = user_responses.get(user_id)

    if user_data and user_data["question_index"] < len(risk_questions):
        question_index = user_data["question_index"]
        await context.bot.send_message(
            chat_id=user_id,
            text=risk_questions[question_index]["question"],
            reply_markup=get_keyboard(question_index)
        )

async def handle_risk_response(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É."""
    query = update.callback_query
    user_id = query.message.chat_id
    user_data = user_responses.get(user_id)

    if user_data is None or user_data["question_index"] >= len(risk_questions):
        await query.answer()
        return ConversationHandler.END

    answer = query.data
    if answer in ["1", "2", "3"]:
        user_data["score"] += int(answer)
        user_data["question_index"] += 1
        await query.answer()

        if user_data["question_index"] < len(risk_questions):
            await ask_next_question(user_id, context)
            return ANSWERING_QUESTIONS
        else:
            await calculate_risk_profile(user_id, context)
            return ConversationHandler.END
    else:
        await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return ANSWERING_QUESTIONS

async def calculate_risk_profile(user_id: int, context: CallbackContext) -> None:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    user_data = user_responses.get(user_id)
    if user_data is None:
        return

    score = user_data["score"]

    if score <= 7:
        profile = "üîµ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä\nüíº –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥"
    elif score <= 11:
        profile = "üü† –£–º–µ—Ä–µ–Ω–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä\nüíº –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥"
    else:
        profile = "üî¥ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä\nüíº –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç"

    db.save_risk_profile(user_id, profile)

    await context.bot.send_message(
        chat_id=user_id,
        text=f"üéØ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–¢–≤–æ–π —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å:\n{profile}\n\n‚ú® –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ—Ä—Ç—Ñ–µ–ª—è!"
    )

# Create conversation handler
risk_profile_conversation = ConversationHandler(
    entry_points=[CommandHandler('risk_profile', handle_risk_profile)],
    states={
        ANSWERING_QUESTIONS: [CallbackQueryHandler(handle_risk_response)]
    },
    fallbacks=[]
)

__all__ = ['risk_profile_conversation']
